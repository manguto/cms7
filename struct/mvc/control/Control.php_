<?php
namespace cms\control;

use manguto\cms7\lib\Diretorios;
use manguto\cms7\lib\ProcessResult;
use manguto\cms7\lib\Exception;
use manguto\cms7\lib\Arquivos;
use cms\model\User;
use Slim\Slim;
use manguto\cms7\lib\cms\CMSAccessManagement;


class Control
{
    /**
     * inicializa o Content Management System (CMS)
     */
    static function Initialize()
    {
        // SLIM PLATAFORM ANALISYS - ROUTES
        $app = new Slim();
        $app->config('debug', true);
        { // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            self::PlatformRouteAnalisys($app);
        } // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        $app->run();
    }

    // ##############################################################################################################
    // ########################################################################################## CONTROLE DE ACESSO
    // ##############################################################################################################
    
    /**
     * Realiza o controle de acesso ao conteudo seguinte apenas a usuarios logados
     */
    protected static function PrivativeZone()
    {
        if (! CMSAccessManagement::checkUserLogged()) {
            ProcessResult::setError("Permiss達o de acesso negada. Contate o administrador.");
            CMS::headerLocation('/');
            exit();
        }
    }

    /**
     * Realiza o controle de acesso ao conteudo seguinte apenas a usuarios logados e Administradores
     */
    protected static function PrivativeAdminZone()
    {
        if (! CMSAccessManagement::checkUserLoggedAdmin() && ! CMSAccessManagement::checkUserLoggedDev()) {
            ProcessResult::setError("Permiss達o de acesso negada. Contate o administrador.");
            CMS::headerLocation('/');
            exit();
        }
    }

    /**
     * Realiza o controle de acesso ao conteudo seguinte apenas a usuarios logados e Administradores
     */
    protected static function PrivativeDevZone()
    {
        if (! CMSAccessManagement::checkUserLoggedDev()) {
            ProcessResult::setError("Permiss達o de acesso negada. Contate o administrador.");
            CMS::headerLocation('/');
            exit();
        }
    }

    protected static function PrivateCrudPermission($operation, $target_user_id)
    {
        // deb($operation,0); deb($target_user_id);
        {
            // logged user
            $user = CMSAccessManagement::getSessionUser();
            $adm = intval($user->checkProfile('admin'));
            $dev = intval($user->checkProfile('dev'));
            $level_user = 1 + $adm + $dev;
        }
        // deb($userLevel);
        
        { // target user
            $user = new User($target_user_id);
            $adm = intval($user->checkProfile('admin'));
            $dev = intval($user->checkProfile('dev'));
            $level_user_target = 1 + $adm + $dev;
        }
        
        try {
            $accessDenied = false;
            if ($operation == 'view') {
                if ($level_user_target > $level_user) {                    
                    $accessDenied = true;
                }
            } else if ($operation == 'delete' || $operation == 'edit') {
                if ($level_user_target >= $level_user) {
                    $accessDenied = true;
                }
            }
            if($accessDenied){
                throw new Exception("Permiss達o negada. Contate o administrador.");
            }
        } catch (Exception $e) {
            ProcessResult::setError($e);
            CMS::headerLocation('/');
        }
    }

    // ##############################################################################################################
    // ########################################################################################## FUNCOES AUXILIARES
    // ##############################################################################################################
    
    /**
     * obtem os nomes completos das classes de controle
     *
     * @return array
     */
    private static function GetControlClassArray(): array
    {
        $return = [];
        $controlFileArray = Diretorios::obterArquivosPastas('sis/control', true, true, false, 'php');
        foreach ($controlFileArray as $controlFile) {
            if (Arquivos::obterNomeArquivo($controlFile, false) != 'Control') {
                $return[] = strtr($controlFile, [
                    '.php' => '',
                    '/' => '\\'
                ]);
            }
        }
        return $return;
    }

    /**
     * Verifica o tratamento das rotas existentes
     *
     * @param Slim $app
     */
    private static function PlatformRouteAnalisys(Slim $app)
    {
        $controlClassArray = self::GetControlClassArray();
        foreach ($controlClassArray as $controlClass) {
            $controlClass::RunRouteAnalisys($app);
        }
    }
}

?>